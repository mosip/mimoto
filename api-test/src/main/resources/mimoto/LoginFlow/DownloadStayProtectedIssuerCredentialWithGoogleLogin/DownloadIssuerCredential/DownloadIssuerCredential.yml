DownloadStayProtectedIssuerCredentialWithGoogleLogin:
   Mimoto_DownloadStayProtectedIssuerCredentialWithGoogleLogin_SunBirdC_All_Valid_Smoke_sid:
      endPoint: /v1/mimoto/wallets/{walletId}/credentials
      description: Downloading sunbird credential with valid authorizationCode after google login
      uniqueIdentifier: TC_Mimoto_DownloadStayProtectedIssuerCredentialWithGoogleLogin_01
      role: userDefinedCookie
      restMethod: get
      inputTemplate: mimoto/LoginFlow/DownloadStayProtectedIssuerCredentialWithGoogleLogin/DownloadIssuerCredential/DownloadIssuerCredential
      outputTemplate: mimoto/LoginFlow/DownloadStayProtectedIssuerCredentialWithGoogleLogin/DownloadIssuerCredential/DownloadIssuerCredentialResult
      input: '{
      "grantType": "authorization_code",
      "code": "$ID:ESignet_AuthorizationCode_SunBirdCForGoogleLogin_SunBirdC_All_Valid_Smoke_sid_code$",
      "redirectUri": "$INJIREDIRECTURI$",
      "codeVerifier": "$CODEVERIFIER$",
      "issuer": "StayProtected",
      "credentialConfigurationId": "InsuranceCredential",
      "walletId": "$ID:CreateWallet_all_Valid_Smoke_sid_walletId$",
      "cookie": "$ID:GoogleLoginToken_all_Valid_Smoke_sessionCookie$",
      "cookieName": "SESSION",
      "acceptLanguage": "en"
}'
      output: '{
      "credentialTypeDisplayName": "Health Insurance"
}'

   Mimoto_DownloadMultipleStayProtectedIssuerCredentialWithGoogleLogin_SunBirdC_All_Valid_Smoke_sid:
      endPoint: /v1/mimoto/wallets/{walletId}/credentials
      description: Downloading Multiple sunbird credential for policy already downloaded with valid authorizationCode after google login
      uniqueIdentifier: TC_Mimoto_DownloadStayProtectedIssuerCredentialWithGoogleLogin_02
      role: userDefinedCookie
      restMethod: get
      inputTemplate: mimoto/LoginFlow/DownloadStayProtectedIssuerCredentialWithGoogleLogin/DownloadIssuerCredential/DownloadIssuerCredential
      outputTemplate: mimoto/LoginFlow/DownloadStayProtectedIssuerCredentialWithGoogleLogin/DownloadIssuerCredential/DownloadIssuerCredentialResult
      input: '{
      "grantType": "authorization_code",
      "code": "$ID:ESignet_AuthorizationCode_SunBirdCForGoogleLogin_MultipleVC_SunBirdC_All_Valid_Smoke_sid_code$",
      "redirectUri": "$INJIREDIRECTURI$",
      "codeVerifier": "$CODEVERIFIER$",
      "issuer": "StayProtected",
      "credentialConfigurationId": "InsuranceCredential",
      "walletId": "$ID:CreateWallet_all_Valid_Smoke_sid_walletId$",
      "cookie": "$ID:GoogleLoginToken_all_Valid_Smoke_sessionCookie$",
      "cookieName": "SESSION",
      "acceptLanguage": ""
}'
      output: '{
      "credentialTypeDisplayName": "Health Insurance"
}'

   Mimoto_DownloadStayProtectedIssuerCredentialWithGoogleLogin_SunBirdC_InvalidLocale_Neg:
      endPoint: /v1/mimoto/wallets/{walletId}/credentials
      description: Downloading sunbird credential with valid authorizationCode after google login with invalid locale and expects it to fail
      uniqueIdentifier: TC_Mimoto_DownloadStayProtectedIssuerCredentialWithGoogleLogin_03
      role: userDefinedCookie
      restMethod: get
      inputTemplate: mimoto/LoginFlow/DownloadStayProtectedIssuerCredentialWithGoogleLogin/DownloadIssuerCredential/DownloadIssuerCredential
      outputTemplate: mimoto/error2
      input: '{
      "grantType": "authorization_code",
      "code": "$ID:ESignet_AuthorizationCode_SunBirdCForGoogleLogin_SunBirdC_All_Valid_Smoke_sid_code$",
      "redirectUri": "$INJIREDIRECTURI$",
      "codeVerifier": "$CODEVERIFIER$",
      "issuer": "StayProtected",
      "credentialConfigurationId": "InsuranceCredential",
      "walletId": "$ID:CreateWallet_all_Valid_Smoke_sid_walletId$",
      "cookie": "$ID:GoogleLoginToken_all_Valid_Smoke_sessionCookie$",
      "cookieName": "SESSION",
      "acceptLanguage": "oo"
}'
      output: '{
      "errorCode":"invalid_request"
}'

   Mimoto_DownloadStayProtectedIssuerCredentialWithGoogleLogin_SunBirdC_SpaceInLocale_Neg:
      endPoint: /v1/mimoto/wallets/{walletId}/credentials
      description: Downloading sunbird credential with valid authorizationCode after google login with space in locale and expects it to fail
      uniqueIdentifier: TC_Mimoto_DownloadStayProtectedIssuerCredentialWithGoogleLogin_04
      role: userDefinedCookie
      restMethod: get
      inputTemplate: mimoto/LoginFlow/DownloadStayProtectedIssuerCredentialWithGoogleLogin/DownloadIssuerCredential/DownloadIssuerCredential
      outputTemplate: mimoto/error2
      input: '{
      "grantType": "authorization_code",
      "code": "$ID:ESignet_AuthorizationCode_SunBirdCForGoogleLogin_SunBirdC_All_Valid_Smoke_sid_code$",
      "redirectUri": "$INJIREDIRECTURI$",
      "codeVerifier": "$CODEVERIFIER$",
      "issuer": "StayProtected",
      "credentialConfigurationId": "InsuranceCredential",
      "walletId": "$ID:CreateWallet_all_Valid_Smoke_sid_walletId$",
      "cookie": "$ID:GoogleLoginToken_all_Valid_Smoke_sessionCookie$",
      "cookieName": "SESSION",
      "acceptLanguage": " "
}'
      output: '{
      "errorCode":"invalid_request"
}'

   Mimoto_DownloadStayProtectedIssuerCredentialWithGoogleLogin_SunBirdC_NumericInLocale_Neg:
      endPoint: /v1/mimoto/wallets/{walletId}/credentials
      description: Downloading sunbird credential with valid authorizationCode after google login with numeric in locale  and expects it to fail
      uniqueIdentifier: TC_Mimoto_DownloadStayProtectedIssuerCredentialWithGoogleLogin_05
      role: userDefinedCookie
      restMethod: get
      inputTemplate: mimoto/LoginFlow/DownloadStayProtectedIssuerCredentialWithGoogleLogin/DownloadIssuerCredential/DownloadIssuerCredential
      outputTemplate: mimoto/error2
      input: '{
      "grantType": "authorization_code",
      "code": "$ID:ESignet_AuthorizationCode_SunBirdCForGoogleLogin_SunBirdC_All_Valid_Smoke_sid_code$",
      "redirectUri": "$INJIREDIRECTURI$",
      "codeVerifier": "$CODEVERIFIER$",
      "issuer": "StayProtected",
      "credentialConfigurationId": "InsuranceCredential",
      "walletId": "$ID:CreateWallet_all_Valid_Smoke_sid_walletId$",
      "cookie": "$ID:GoogleLoginToken_all_Valid_Smoke_sessionCookie$",
      "cookieName": "SESSION",
      "acceptLanguage": "14"
}'
      output: '{
      "errorCode":"invalid_request"
}'
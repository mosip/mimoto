# MOSIP
# Defines the base URLs for various MOSIP services and Keycloak for internal and external communication
mosip.api.public.url=http://localhost:${server.port}
mosipbox.public.url=https://api-internal.collab.mosip.net
keycloak.internal.url=http://keycloak.keycloak
keycloak.external.url=https://iam.collab.mosip.net
mosip.kernel.masterdata.url=http://masterdata.kernel
mosip.kernel.authmanager.url=http://authmanager.kernel/

# Resident service Configurations used in downloading the Verifiable Credential of MosipOtp issuer
# Base URL for Resident service
mosip.resident.base.url=https://api.collab.mosip.net/resident/v1
# This URL used for fetching the OTP from resident service prior to initiating the download flow on the Mobile Wallet
RESIDENT_OTP=${mosip.resident.base.url}/req/otp
# This URL used for fetching the OTP while getting the UIN/VID from AID(Application ID)
RESIDENT_INDIVIDUALID_OTP=${mosip.resident.base.url}/individualId/otp
# This URL is used to get the status about whether the UIN/VID is generated from AID or not
RESIDENT_AID_GET_INDIVIDUALID=${mosip.resident.base.url}/aid/status
# URL to request the Verifiable Credential download from the Resident service
RESIDENT_CREDENTIAL_REQUEST=${mosip.resident.base.url}/req/credential
# URL to check if the Verifiable Credential is downloaded yet or not
RESIDENT_CREDENTIAL_REQUEST_STATUS=${RESIDENT_CREDENTIAL_REQUEST}/status
# URL used to get the VID for the respective UIN
RESIDENT_VID=${mosip.resident.base.url}/vid
RESIDENT_AUTH_LOCK=${mosip.resident.base.url}/req/auth-lock
RESIDENT_AUTH_UNLOCK=${mosip.resident.base.url}/req/auth-unlock

#Esignet service
# Base URL for e-Signet service
mosip.esignet.host=https://esignet.collab.mosip.net
# Endpoint for fetching the OTP in Wallet binding flow
BINDING_OTP=${mosip.esignet.host}/v1/esignet/binding/binding-otp
# Endpoint for binding the credentials to the Wallet
WALLET_BINDING=${mosip.esignet.host}/v1/esignet/binding/wallet-binding


# Websub service configurations
# Dev sandbox
# Base URL for WebSub service
mosip.websub.url=http://websub.websub/
# Hub URL for WebSub service
mosip.event.hubUrl=${mosip.websub.url}/hub/
# WebSub hub URL used to subscribe to a specific topic
mosip.event.hub.subUrl=${mosip.event.hubUrl}
# WebSub hub URL used to publish the data to a specific topic
mosip.event.hub.pubUrl=${mosip.event.hubUrl}

# Delayed WebSub subscription. Default is 5 seconds in ms.
mosip.event.delay-millisecs=5000
# WebSub re-subscription workaround for losing subscribed topic when MOSIP WebSub update or restart. Default is 5 minutes in ms.
websub-resubscription-delay-millisecs=300000

# Callback URL for receiving the WebSub event notifications
mosip.event.callBackUrl=${mosip.api.public.url}/v1/mimoto/credentialshare/callback/notify
# Kafka topic to which the CREDENTIAL_ISSUED for specific partner id is published
mosip.event.topic=${mosip.partner.id}/CREDENTIAL_ISSUED
# Secret key used for validating the authenticity of the WebSub event notifications
mosip.event.secret=Kslk30SNF2AChs2

# MOSIP partner
# Unique identifier which is being used as the Issuer during MOSIP OTP issuer Verifiable Credential download requests
mosip.partner.id=mpartner-default-mobile
# Name of the PKCS#12 keystore file for cryptographic operations
mosip.partner.crypto.p12.filename=keystore.p12
# Password for accessing the PKCS#12 keystore file
mosip.partner.crypto.p12.password=abc123
# Alias used to access the secure credentials like private key of partner within the PKCS#12 keystore file
mosip.partner.crypto.p12.alias=partner
# Encryption key used for securing partner data
mosip.partner.encryption.key=123456
# Property which indicates whether the data includes its thumbprint (a unique hash for integrity verification) or not
mosip.partner.prependThumbprint=true

# Property which defines whether protection against Cross-Site Request Forgery (CSRF) attacks should be enabled or disabled
csrf.disabled=true

#-------------TOKEN GENERATION----------------
#Token generation request id
token.request.id=io.mosip.registration.processor
#Token generation app id
token.request.appid=regproc
#Token generation username
token.request.username=registrationprocessor
#Token generation password
token.request.password=abc123
#Token generation version
token.request.version=1.0
#Token generation Client Id
token.request.clientId=mosip-regproc-client
#Token generation secret key
token.request.secretKey=abc123
#Token generation issuer url
token.request.issuerUrl=${keycloak.internal.url}/auth/realms/mosip

#Audit Service
AUDIT=${mosip.kernel.auditmanager.url}/v1/auditmanager/audits
AUDIT_URL=${mosip.kernel.auditmanager.url}/v1/auditmanager/audits
KEYBASEDTOKENAPI=${mosip.kernel.authmanager.url}/v1/authmanager/authenticate/clientidsecretkey

#Master Data Services
# MASTER=http://kernel-masterdata-service/v1/masterdata
MASTER=${mosip.kernel.masterdata.url}/v1/masterdata
TEMPLATES=${MASTER}/templates

#Packet receiver application version
mosip.print.application.version=1.0
#Request Date Time format
mosip.print.datetime.pattern=yyyy-MM-dd'T'HH:mm:ss.SSS'Z'


#-------------Printing Service--------------------
mosip.print.service.id=mosip.print

#Audit request id
mosip.print.audit.id=mosip.applicanttype.getApplicantType
mosip.country.code=MOR

#Kernel Crypto signature
registration.processor.signature.isEnabled=true

# Language Supported By Platform - ISO
# Defines the list of optional languages supported by the platform
mosip.optional-languages=fra,ara
# Defines the list of mandatory languages supported by the platform
mosip.mandatory-languages=eng
# mosip.primary-language=eng
# mosip.secondary-language=ara

#----------------------- CBEFF Util--------------------------------------------------
# Cbeff URL where the files will be stored in git, change it accordingly in case of change of storage location.
# mosip.kernel.xsdstorage-uri=${spring.cloud.config.uri}/${spring.application.name}/${spring.profiles.active}/${spring.cloud.config.label}/
mosip.kernel.xsdstorage-uri=https://raw.githubusercontent.com/mosip/mosip-config/qa-1201-B2/
# Cbeff XSD file name in config server
mosip.kernel.xsdfile=mosip-cbeff.xsd

#----------------------------- Applicant Type --------------------------------------------------
mosip.kernel.applicant.type.age.limit = 5

#----------------------------- Static PIN --------------------------------------------------
mosip.kernel.pin.length=6

#-----------------------------TOKEN-ID Properties---------------------------------
#length of the token id
mosip.kernel.tokenid.length=36

# log level
logging.level.root=WARN
logging.level.io.mosip=INFO
# logging.level.io.mosip.kernel.auth.defaultadapter.filter=INFO
logging.level.io.mosip.kernel.auth.defaultadapter=DEBUG
logging.level.org.springframework.http.client=DEBUG
logging.level.io.mosip.mimoto=INFO
logging.level.reactor.netty.http.client=INFO
# tomcat access logs
server.tomcat.accesslog.enabled=true
server.tomcat.accesslog.directory=/dev
server.tomcat.accesslog.prefix=stdout
server.tomcat.accesslog.buffered=false
server.tomcat.accesslog.suffix=
server.tomcat.accesslog.file-date-format=
server.tomcat.accesslog.pattern={"@timestamp":"%{yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}t","level":"ACCESS","level_value":70000,"traceId":"%{X-B3-TraceId}i","appId":"%{X-AppId}i","statusCode":%s,"req.requestURI":"%U","bytesSent":%b,"timeTaken":%T,"appName":"${spring.application.name}"}
server.tomcat.accesslog.className=io.mosip.kernel.core.logger.config.SleuthValve
registration.processor.unMaskedUin.length=5

IDSchema.Version=1.0
registration.processor.identityjson=identity-mapping.json
registration.processor.demographic.identity=identity
CREATEDATASHARE=${mosipbox.public.url}/v1/datashare/create
DECRYPTPINBASSED=${mosipbox.public.url}/v1/keymanager/decryptWithPin

# config.server.file.storage.uri=${spring.cloud.config.uri}/${spring.application.name}/${spring.profiles.active}/${spring.cloud.config.label}/
config.server.file.storage.uri=https://raw.githubusercontent.com/mosip/inji-config/develop/

# websub authentication - auth adapter
mosip.iam.adapter.appid=partner
mosip.iam.adapter.clientid=mpartner-default-mobile
#dev2
mosip.iam.adapter.clientsecret=mJQ3g1dPbonDFNW8
#qa-inji
#mosip.iam.adapter.clientsecret=vl3ox2rvSeW78LzL
auth.server.admin.issuer.uri=${keycloak.external.url}/auth/realms/

mosip.iam.adapter.issuerURL=${keycloak.internal.url}/auth/realms/mosip
mosip.authmanager.base-url=${mosip.kernel.authmanager.url}/v1/authmanager
mosip.authmanager.client-token-endpoint=${mosip.authmanager.base-url}/authenticate/clientidsecretkey
auth.server.admin.validate.url=${mosip.kernel.authmanager.url}/v1/authmanager/authorize/admin/validateToken

# in minutes
mosip.iam.adapter.validate-expiry-check-rate=1440
# in minutes
mosip.iam.adapter.renewal-before-expiry-interval=1440

#this should be false if you don?t use this restTemplate true if you do
mosip.iam.adapter.self-token-renewal-enable=true
mosip.auth.filter_disable=false
mosip.auth.adapter.impl.basepackage=io.mosip.kernel.auth.defaultadapter
mosip.kernel.auth.appids.realm.map={prereg:'mosip',ida:'mosip',registrationclient:'mosip',regproc:'mosip',partner:'mosip',resident:'mosip',admin:'mosip',crereq:'mosip',creser:'mosip',datsha:'mosip',idrepo:'mosip'}
wallet.binding.partner.id=mpartner-default-keybindingtoken
wallet.binding.partner.api.key=Aci9jg28B8mO_LDfDXo3ZTp5_HKgEMun2tYyHCa1e8k
#wallet.binding.partner.id=mpartner-default-mimotobinding
#wallet.binding.partner.api.key=14378
mosip.iam.adapter.disable-self-token-rest-template=true

# Mosip notification otp channel config - defines the predefined list of otp channels allowed for sending the OTP to the user
mosip.notificationtype=SMS|EMAIL|PHONE

# OpenID4VCI related configurations
# Specifies the file name which includes the list of Issuers Configurations, including their well-known endpoints and other details
mosip.openid.issuers=mimoto-issuers-config.json
# Fallback HTML template used to render the Verifiable Credential if no issuer-specific template is found
mosip.openid.htmlTemplate=credential-template.html
# Specifies the type of client assertion used for OIDC authentication with e-signet (e.g., JWT bearer)
mosip.oidc.client.assertion.type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer
# PKCS#12 keystore file name containing secured credentials (e.g., private key and client alias) for each onboarded issuer, used in the authentication flow with e-Signet
mosip.oidc.p12.filename=oidckeystore.p12
# Password to access the PKCS#12 keystore file
mosip.oidc.p12.password=mosip@123
# Relative path to the directory which contains PKCS#12 keystore file
mosip.oidc.p12.path=certs/

# Inji Web Config
# Base URL for Inji Web application
mosip.inji.web.url=http://localhost:3004
# Inji Web Redirect URL which is used to show the error message in case of failure in OpenID4VP flow
mosip.inji.web.redirect.url=${mosip.inji.web.url}/authorize

#OpenId4VP related Configuration
# Pattern for including the OpenID4VP Authorization request in the QR code data of the Verifiable Credential, with placeholders for including resource(DataShare URL) and Presentation Definition
mosip.inji.ovp.qrdata.pattern=INJI_OVP://http://localhost:${server.port}/v1/mimoto/authorize?response_type=vp_token&resource=%s&presentation_definition=%s
# Pattern for returning the response in redirect URL for successful Verifiable Presentation in OpenId4VP flow
mosip.inji.ovp.redirect.url.pattern=%s#vp_token=%s&presentation_submission=%s
# Pattern for returning the error in redirect URL in case of Verifiable Presentation failure in OpenId4VP flow
mosip.inji.ovp.error.redirect.url.pattern=%s?error=%s&error_description=%s
# File name containing trusted verifiers for OpenId4VP. It is used for validating the verifiers during the OpenID4VP process
mosip.openid.verifiers=mimoto-trusted-verifiers.json

#DataShare Config
# Base URL for DataShare Service
mosip.data.share.url=http://localhost:8097
# Endpoint for creating DataShare requests and storing downloaded Verifiable Credentials
mosip.data.share.create.url=${mosip.data.share.url}/v1/datashare/create/static-policyid/static-subscriberid
# URL pattern used to validate DataShare URL and retrieve Verifiable Credential from DataShare
mosip.data.share.get.url.pattern=${mosip.data.share.url}/v1/datashare/get/static-policyid/static-subscriberid/*
# Specifies the maximum number of retry attempts for creating a DataShare request to store Verifiable Credential, ensuring reliability in case of transient failures
mosip.data.share.create.retry.count=3

# This config enables CORS for the application, allowing it to handle cross-origin requests
mosip.security.cors-enable=true
# Predefined list of cross origins which are allowed to access the application resources
mosip.security.origins=http://localhost:3004

# Redis configuration
# Defines the hostname of the Redis server, required to connect to the Redis instance.
spring.data.redis.host=localhost
# Specifies the port number for the Redis server, required to connect to the Redis instance.
spring.data.redis.port=6379
# Sets the password for connecting to the Redis server (empty if no password is required), ensuring secure access.
spring.data.redis.password=

# Defines the hostname where the database is hosted
mosip.mimoto.database.hostname=localhost
# Defines the port number on which database is running and available
mosip.mimoto.database.port=5432

# Database configuration
# Defines the username for accessing the PostgreSQL database, required for authentication
spring.datasource.username=postgres
# Defines the password for accessing the PostgreSQL database, required for authentication
spring.datasource.password=postgres

# Key-manager specific properties
# Defines the file path for the PKCS#12 keystore used by the KeyManager service for cryptographic keys
# E.g., place the .p12 file in 'mimoto/certs' folder and provide its path here
mosip.kernel.keymanager.hsm.config-path=certs/oidckeystore.p12
# Defines the type of the keystore used by the Key Manager as PKCS#12
mosip.kernel.keymanager.hsm.keystore-type=PKCS12
# Password to access the KeyManager PKCS#12 keystore file
mosip.kernel.keymanager.hsm.keystore-pass=mosip123